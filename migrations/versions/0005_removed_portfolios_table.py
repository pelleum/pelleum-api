"""Removed portfolios table

Revision ID: 0005
Revises: 0004
Create Date: 2022-01-08 20:17:22.743760

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0005"
down_revision = "0004"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_assets_portfolio_id", table_name="assets")
    op.drop_index("ix_assets_thesis_id", table_name="assets")
    op.drop_index("ix_portfolio_id_asset_symbol_institution_id", table_name="assets")
    op.drop_table("assets")
    op.drop_index("ix_portfolios_user_id", table_name="portfolios")
    op.drop_table("portfolios")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "portfolios",
        sa.Column(
            "portfolio_id",
            sa.BIGINT(),
            server_default=sa.text("nextval('portfolios_portfolio_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "aggregated_value",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.user_id"], name="portfolios_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("portfolio_id", name="portfolios_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_portfolios_user_id", "portfolios", ["user_id"], unique=False)
    op.create_table(
        "assets",
        sa.Column("asset_id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("portfolio_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("institution_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("thesis_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("asset_symbol", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "quantity",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "position_value",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "skin_rating",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "average_buy_price",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "total_contribution",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("is_up_to_date", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("update_errors", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["institution_id"],
            ["account_connections.institutions.institution_id"],
            name="assets_institution_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["portfolio_id"],
            ["portfolios.portfolio_id"],
            name="assets_portfolio_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["thesis_id"], ["theses.thesis_id"], name="assets_thesis_id_fkey"
        ),
        sa.PrimaryKeyConstraint("asset_id", name="assets_pkey"),
    )
    op.create_index(
        "ix_portfolio_id_asset_symbol_institution_id",
        "assets",
        ["portfolio_id", "asset_symbol", "institution_id"],
        unique=False,
    )
    op.create_index("ix_assets_thesis_id", "assets", ["thesis_id"], unique=False)
    op.create_index("ix_assets_portfolio_id", "assets", ["portfolio_id"], unique=False)
    # ### end Alembic commands ###
